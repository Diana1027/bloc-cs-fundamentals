Exercises: 

Q: What is the main difference between a stack and a queue?
A: The main differnce between a stack and a queue is that a stack implements a Last In First Out priority collection, whereas a queue implements a First In First Out priority collection.

Q: What are the similarities between stacks and queues?
A: The similarities between stacks and queues are that they are both data structures that can be used to help organize and maintain data.  

Q: Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

A: With the UNDO operation I would use the stack data structure as it uses a LIFO priority.  So the last thing that gets typed would be the first thing to get removed if I use the UNDO button.  I think I would also use a stack data structure for the REDO operation as well since if I wanted to redo the last thing that I undid I would want to target the last thing that I called the UNDO operation on and use REDO.  

Programming Questions 

Q: Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

function reverse(str) {
    var stack = [];
    for (var i = 0; i < str.length; i++) {
        stack.push(str[i]);
    }
    var reverseStr = '';
    while (stack.length > 0) {
        reverseStr += stack.pop();
    }
  return reverseStr;
}
reverse("JavaScript Stack") 

Q: Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

class Stack {
    constructor(){
        this.pop = function(str){
            var newArray = [];
            var elementRemoved = [];

            for(var i = 0; i < str.length; i++){
                if(i === str.length - 1){
                    elementRemoved.push(str[i]);
                } else {
                    newArray.push(str[i]);
                }
            }
            return elementRemoved;
        }
    }
}
var stack = new Stack();
console.log(stack.pop("Snow"))

Q: Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

class Queue {
   constructor(){
     this.elements = []
   }
  enqueue(element)
{    
    this.elements.push(element);
}
  dequeue()
{
    if(this.isEmpty())
        return "Empty";
    return this.elements.shift();
}
  isEmpty()
{
    return this.elements.length === 0;
}

}
var queue = new Queue();

queue.enqueue(10)
queue.enqueue(10)
console.log(queue)
queue.dequeue()
console.log(queue) 