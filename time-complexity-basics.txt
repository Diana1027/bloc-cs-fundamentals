1. What is time complexity and what is its relation to algorithms?
A: Time complexity is the measurment of the amount of time it takes to execute a program and it's usually expressed as a function.  A time complexity analysis is used to describe how efficient an algorithm is based on the input size. 

2.  What is runtime? 
A:  Runtime is the time duration that an algorithm takes to complete.  This term can be interchanged with time complexity.

3. How is the runtime of an algorithm calculated?
A: The runtime of an algorithm is calculated by adding up all the instructions that the algorithm will execute based on the size of the input.  Then you keep the largest term while dropping any constants. 

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

        1. Constant Growth : O(1)
        2. Logarithmic Growth: O(log n)
        3. Linear Growth: O(n)
        4. Log-Linear Growth:O(n log n)
        5. Quadratic Growth : O(n^2)
        6. Exponential Growth : O(2^n)
        7. Factorial: O(n!)

5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.
A:  Constant Growth Rate:  Timed SAT/ACT tests - The SAT/ACT's are timed tests and all students taking the exam must start and finish within the prescribed time.  So the amount of students taking the test will not impact the amount of time they have to take the test - if only 1 student takes the test he/she will be given the same amount of time as 1000 students taking the test. 

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

A: The time complexity is O(n)

7. Determine the time complexity of the following snippet of code

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

A: The time complexity is O(n^2)

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: The time complexity is O(2^n)

9. Out of the code snippets you just saw, which is the most time efficient?
A: Linear Growth:  O(n)