Exercises 

1. In your own words, explain what clean code is and why it is important.

A: Clean code is code that is easy to understand, readable, simple, and easy to maintain. It's important to write clean code because other people, besides the developer, will be reading and maintaining that code.  Therefore, clean code allows other developers to understand the intent of the code and not cause any confusion. In addition, clean code is easier to maintain. 

2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

A: If code is not created to an acceptable standard and then tested dangerous things can happen.  It's unfortunate what happend with the Toyota car and the people who were inside.  However, this is the primary reason as to why code/programmers need to maintain high standards and frequently test their code.  I'm sure there are many processes that have been automated via coded programs, and if the code in those programs is sub-par and left untested the product has high potential to be harmful to those who use it. 

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

A: I don't consider the above code to be clean code. It's difficult to tell what the code is doing right away; you need to read through the entire code before it becomes clear that this code converts temperature. I would refactor it this way: 

FUNCTION convertTemperature(celsius, fahrenheit)
    IF fahrenheit = "F" THEN
    SET temperature to (celsius - 32) * (5/9)
    PRINT temperature
    ELSE IF fahrenheit = "C" THEN
    SET temperature to celsius * 1.8000 + 32.00
    PRINT temperature
    END IF
END FUNCTION

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

A: I personally consider this code to be clean.  I can quickly look at it and know that it's a function that will calculate the percentage.  The IF statement checks to make sure that you're not dividing by 0 before performing the calculation. If the total equals zero then the ELSE statement fires, but the total is not 0 the calculation fires.  So for me, I can read and understand what this code is doing. 

5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

A:(refactored) 

FUNCTION printCustomerBill(subTotal, discountRate, paymentType)
    PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)
END FUNCTION

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
    IF paymentType = 'CASH' THEN    
        CALL getPayment RETURNING amount
        PRINT  "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
    ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

A: (refactored)

FUNCTION checkoutBook(book, guest)
    IF guest.accountActive THEN 
        IF guest.hasOverdueBooks OR guest.outstandingFees THEN
            PRINT "Unable to check out book"
        ELSE IF guest.outstandingFee = 0 THEN
            APPEND book to guest.books
            SET book.status to "Checked Out"
            PRINT "Your books have been issued."
        END IF
    END IF
END FUNCTION

c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 A: (refactored)


CLASS bankAccountOperations
    
    FUNCTION displayBalance
        PRINT balance
    END FUNCTION

    FUNCTION deposit(amount)
        SET balance to balance + amount
    END FUNCTION

    FUNCTION withdraw(amount)
        IF balance > amount THEN
            SET balance to balance - amount
        END IF
    END FUNCTION
END CLASS

CLASS bankAccountOffers 

    FUNCTION creditCardOffer
        IF NOT(customer.hasCreditCard) THEN
            CALL offerCreditCard
        END IF
    END FUNCTION

    FUNCTION checkStatus
        IF NOT(customer.hasCheckingAccount) THEN
            CALL offerCheckingAccount
        END IF
    END FUNCTION
END CLASS


Programming Questions 

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

function getSquare(array){
  let sum = 0;
    for(var i = 0; i < array.length; i++){
      sum = sum + array[i];
    }
    if(sum > 0 && Math.sqrt(sum) % 1 === 0){
      return (Math.sqrt(sum));
    } else {
      return sum
    }
}
var myArray = [80,1];
getSquare(myArray);


7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function isDuplicate(array){
    for(var i = 0; i <= array.length; i++){
        for(var j = i; j <= array.length; j++){
            if(i !== j && array[i] === array[j]){
                return true
            }
        }
    }
    return false;
}
var myArray = [1,2,3,4];
isDuplicate(myArray);

Extra Credit
8. Anagram An anagram is a word, phrase, or name formed by rearranging the letters of another word. For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity. Hint: Your first task will be to convert the strings to arrays.

function checkAnagram(stringOne, stringTwo) {
   return stringOne.split("").sort().join("") === stringTwo.split("").sort().join("")
}